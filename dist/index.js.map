{"version":3,"file":"index.js","sources":["../lib/schemafile.ts","../lib/opts.ts","../lib/collections.ts","../lib/savetodb.ts","../lib/listandsave.ts","../lib/slicearray.ts","../lib/start.ts","../lib/index.ts"],"sourcesContent":["import mongoose from \"mongoose\";\nexport type PANFILE = {\n    category: number;\n    fs_id: number;\n    isdir: 0;\n    local_ctime: number;\n    local_mtime: number;\n    md5: string;\n    oper_id: number;\n    path: string;\n    server_ctime: number;\n    server_filename: string;\n    server_mtime: number;\n    share: number;\n    size: number;\n    unlist: number;\n};\n\nconst panfileschema = new mongoose.Schema(\n    {\n        dir: {\n            type: String,\n            index: true,\n        },\n        fs_id: Number,\n        isdir: Number,\n        md5: {\n            type: String,\n            index: true,\n        },\n        path: {\n            type: String,\n            unique: true,\n            index: true,\n        },\n        server_filename: {\n            type: String,\n            index: true,\n        },\n        size: Number,\n    },\n    { autoIndex: true }\n);\n/* category: 6\nfs_id: 687167496437996\nisdir: 0\nlocal_ctime: 1508856247\nlocal_mtime: 1508856247\nmd5: \"ffd7840449f1b71830bfdf8174dcbe87\"\noper_id: 1157661021\npath: \"/红米note3-系统数据+悬浮菜单备份-20171024-MIUI.zip\"\nserver_ctime: 1508859401\nserver_filename: \"红米note3-系统数据+悬浮菜单备份-20171024-MIUI.zip\"\nserver_mtime: 1508859401\nshare: 0\nsize: 65053459\nunlist: 0 */\nexport default panfileschema;\n","export default {\n    mongourl: \"mongodb://127.0.0.1:27017\",\n\n    db: \"baidupan\",\n    collect: \"panfile\",\n};\n","import mongoose from \"mongoose\";\n// import schemadir from \"./schemadir.js\";\nimport schemafile from \"./schemafile.js\";\nimport opts from \"./opts.js\";\nexport const panFilecollect = mongoose.model(\n    opts.collect,\n    schemafile,\n    opts.collect\n);\npanFilecollect.createIndexes().then(() => {\n    console.log(\"索引建立成功\");\n});\n// export const panDircollect = mongoose.model(\"pandir\", schemadir, \"pandir\");\n// panDircollect.createIndexes().then(() => {\n//     console.log(\"索引建立成功\");\n// });\n","import { posix } from \"path\";\nimport { /*panDircollect,*/ panFilecollect } from \"./collections.js\";\nimport { PANDIR } from \"./schemadir.js\";\nimport { PANFILE } from \"./schemafile.js\";\n\nconst mapfileobjdir = (obj: PANFILE | PANDIR) => {\n    return { ...obj, dir: posix.dirname(obj.path) };\n};\nexport async function savetodb(\n    fileslist: Array<PANFILE | PANDIR> /* , dir: string */\n) {\n    const files = fileslist.filter((fileobj) => !fileobj.isdir);\n    // const dirs = fileslist.filter((fileobj) => fileobj.isdir === 1);\n    const filetosave = files.map(mapfileobjdir);\n    // const dirtosave = dirs.map(mapfileobjdir);\n    // const savepro1 = panFilecollect.updateMany(,files.map(mapfileobjdir),);\n    // const savepro2 = panDircollect.updateMany(dirs.map(mapfileobjdir));\n    // [options.upsert = false] «布尔»如果为true，并且找不到文档，请插入新文档\n    //防止内存溢出   把map改为reduce\n    // const savefilepro = filetosave.reduce(async (prev: Promise<any>, obj) => {\n    //     await prev;\n    //     console.log(\"成功保存到file数据库\", obj.path);\n    //     return await panFilecollect\n    //         .updateMany({ path: obj.path }, obj, {\n    //             upsert: true,\n    //         })\n    //         .exec();\n    // }, Promise.resolve());\n    for (let obj of filetosave) {\n        console.log(\"正在保存到file数据库\", obj.path);\n        await panFilecollect\n            .updateMany({ path: obj.path }, obj, {\n                upsert: true,\n            })\n            .exec();\n        console.log(\"成功保存到file数据库\", obj.path);\n    }\n    /* const savedirpro = dirtosave.reduce(async (prev, obj) => {\n        await prev;\n        console.log(\"保存到dir数据库\", obj.path);\n        return await panDircollect\n            .updateMany({ path: obj.path }, obj, {\n                upsert: true,\n            })\n            .exec();\n    }, Promise.resolve());\n*/\n    // await Promise.all([savefilepro, savedirpro]);\n    // await savefilepro;\n}\n","import currentlimiter from \"@masx200/async-task-current-limiter\";\nimport { listonedir } from \"@masx200/fetch-baidu-pan-files-api\";\nimport { savetodb } from \"./savetodb.js\";\nimport { slicearray } from \"./slicearray.js\";\nconst listlimiter = currentlimiter(8);\n\nasync function listandsaveall(dir: string) {\n    const dirslist = await limitedlistandsavesingle(dir);\n    await parallellistfolder(dirslist);\n}\nconst limitedlistandsavesingle = listlimiter.asyncwrap(rawlistandsavesingle);\nasync function rawlistandsavesingle(\n    dir: string\n    /*  bdstoken: string,\n    logid: string */\n) {\n    const fileslist = await listonedir(dir /* , bdstoken, logid */);\n    console.log(\"successfully fetch file list \", dir /* , fileslist */);\n    const savepro = savetodb(fileslist /* , dir */).then(() => {\n        console.log(\"successfully save data to db \", dir);\n    });\n\n    // const nextpros = dirslist.map(async (dir) => {\n    //     await listandsave(dir /* , bdstoken, logid */);\n    // });\n    // 放防止内存溢出,先保存到数据库\n    await savepro;\n    const dirslist = fileslist\n        .filter((fileobj) => {\n            return fileobj.isdir;\n        })\n        .map((obj) => {\n            return obj.path;\n        });\n    // await Promise.all(nextpros);\n    // await Promise.all([savepro, ...nextpros]);\n    /* <--- JS stacktrace --->\n\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory */\n\n    return dirslist;\n    /* 递归查找子文件夹下的文件 */\n}\nasync function listfolderandsave(dirslist: string[]) {\n    if (!dirslist.length) {\n        return;\n    }\n\n    console.log(dirslist);\n    for (let folder of dirslist) {\n        await listandsaveall(folder);\n    }\n}\nconst parallelnum = 4;\nasync function parallellistfolder(dirslist: string[]) {\n    if (!dirslist.length) {\n        return;\n    }\n\n    console.log(dirslist);\n    const listarrs = slicearray(\n        dirslist,\n        Math.max(1, Math.round(dirslist.length / parallelnum))\n        // 如果count=0,则死循环了\n    );\n    // console.log(listarrs);\n    await Promise.all(listarrs.map((dir) => listfolderandsave(dir)));\n    //await listfolderandsave(dirslist);\n}\nexport { listandsaveall };\n","function slicearray<T>(data: Array<T>, count: number) {\n    // 如果count=0,则死循环了\n    count = Math.max(1, count);\n    var result = [];\n    for (var i = 0; i < data.length; i += count) {\n        result.push(data.slice(i, i + count));\n    }\n    return result;\n}\nexport { slicearray };\n","const homepath = `/`;\n// import { initPANENV } from \"@masx200/fetch-baidu-pan-files\";\nimport mongoose from \"mongoose\";\nimport process from \"process\";\n// import { homepath } from \"./index.js\";\nimport { listandsaveall } from \"./listandsave.js\";\nimport opts from \"./opts.js\";\nexport async function start() {\n    // const panenv = await initPANENV();\n    const connection = mongoose.connect(opts.mongourl, {\n        maxPoolSize: 10,\n        autoIndex: true,\n        autoCreate: true,\n        // useUnifiedTopology: true,\n        // useNewUrlParser: true,\n        // useCreateIndex: true,\n        dbName: opts.db,\n    });\n    await connection.then(() => {\n        console.log(\"mongodb conneted\");\n    });\n    console.log(\"数据库登陆成功\");\n    // console.log(JSON.stringify(panenv));\n    await listandsaveall(homepath /* , bdstoken, logid */);\n    console.log(\"文件数据库全部建立完成\");\n    process.exit();\n}\n","// export const homepath = `/`;\n\nimport process from \"process\";\nimport { start } from \"./start.js\";\n\nprocess.on(\"unhandledRejection\", (err) => {\n    throw err;\n});\nexport { start };\n"],"names":["panfileschema","mongoose","Schema","dir","type","String","index","fs_id","Number","isdir","md5","path","unique","server_filename","size","autoIndex","panFilecollect","model","opts","schemafile","createIndexes","then","console","log","mapfileobjdir","obj","posix","dirname","async","listandsaveall","dirslist","limitedlistandsavesingle","length","listarrs","data","count","Math","max","result","i","push","slice","slicearray","round","Promise","all","map","folder","listfolderandsave","parallellistfolder","currentlimiter","asyncwrap","fileslist","listonedir","savepro","filetosave","filter","fileobj","updateMany","upsert","exec","savetodb","start","connection","connect","maxPoolSize","autoCreate","dbName","process","exit","on","err"],"mappings":";;;;;;;;;;AAkBA,MAAMA,gBAAgB,IAAIC,SAASC,OAC/B;IACIC,KAAK;QACDC,MAAMC;QACNC,QAAO;;IAEXC,OAAOC;IACPC,OAAOD;IACPE,KAAK;QACDN,MAAMC;QACNC,QAAO;;IAEXK,MAAM;QACFP,MAAMC;QACNO,SAAQ;QACRN,QAAO;;IAEXO,iBAAiB;QACbT,MAAMC;QACNC,QAAO;;IAEXQ,MAAMN;GAEV;IAAEO,YAAW;;;ACzCjB,oBACc,uCAEN,2BACK;;ACAN,MAAMC,iBAAiBf,SAASgB,MACnCC,cACAC,eACAD;;AAEJF,eAAeI,gBAAgBC,MAAK;IAChCC,QAAQC,IAAI;;;ACLhB,MAAMC,gBAAiBC,QACZ;OAAKA;IAAKtB,KAAKuB,MAAMC,QAAQF,IAAId;;;ACA5CiB,eAAeC,eAAe1B;IAC1B,MAAM2B,iBAAiBC,yBAAyB5B;UA+CpDyB,eAAkCE;QAC9B,KAAKA,SAASE,QACV;QAGJV,QAAQC,IAAIO;QACZ,MAAMG,WC5DV,SAAuBC,MAAgBC;YAEnCA,QAAQC,KAAKC,IAAI,GAAGF;YAEpB,KADA,IAAIG,SAAS,IACJC,IAAI,GAAGA,IAAIL,KAAKF,QAAQO,KAAKJ,OAClCG,OAAOE,KAAKN,KAAKO,MAAMF,GAAGA,IAAIJ;YAElC,OAAOG;SDqDUI,CACbZ,UACAM,KAAKC,IAAI,GAAGD,KAAKO,MAAMb,SAASE,SATpB;cAaVY,QAAQC,IAAIZ,SAASa,KAAK3C,OAvBpCyB,eAAiCE;YAC7B,KAAKA,SAASE,QACV;YAGJV,QAAQC,IAAIO;YACZ,KAAK,IAAIiB,UAAUjB,gBACTD,eAAekB;SAgBeC,CAAkB7C;KA1DpD8C,CAAmBnB;;;AAE7B,MAAMC,2BANcmB,eAAe,GAMUC,WAC7CvB,eACIzB;IAIA,MAAMiD,kBAAkBC,WAAWlD;IACnCmB,QAAQC,IAAI,iCAAiCpB;IAC7C,MAAMmD,UDVH1B,eACHwB;QAEA,MAEMG,aAFQH,UAAUI,QAAQC,YAAaA,QAAQhD,QAE5BqC,IAAItB;QAe7B,KAAK,IAAIC,OAAO8B,YACZjC,QAAQC,IAAI,gBAAgBE,IAAId,aAC1BK,eACD0C,WAAW;YAAE/C,MAAMc,IAAId;WAAQc,KAAK;YACjCkC,SAAQ;WAEXC,QACLtC,QAAQC,IAAI,gBAAgBE,IAAId;KCjBpBkD,CAAST,WAAuB/B,MAAK;QACjDC,QAAQC,IAAI,iCAAiCpB;;UAO3CmD;IAcN,OAbiBF,UACZI,QAAQC,WACEA,QAAQhD,QAElBqC,KAAKrB,OACKA,IAAId;;;AEzBhBiB,eAAekC;IAElB,MAAMC,aAAa9D,SAAS+D,QAAQ9C,eAAe;QAC/C+C,aAAa;QACblD,YAAW;QACXmD,aAAY;QAIZC,QAAQjD;;UAEN6C,WAAW1C,MAAK;QAClBC,QAAQC,IAAI;SAEhBD,QAAQC,IAAI,kBAENM,eAvBO,MAwBbP,QAAQC,IAAI;IACZ6C,QAAQC;;;ACpBZD,QAAQE,GAAG,uBAAuBC;IAC9B,MAAMA;;;"}